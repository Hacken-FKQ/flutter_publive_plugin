import 'package:im_flutter_sdk/im_flutter_sdk.dart';

///
/// The message event listener.
///
/// This listener is used to check whether messages are received. If messages are sent successfully, a delivery receipt will be returned (delivery receipt needs to be enabled: {@link EMOptions#requireDeliveryAck(boolean)}.
/// If the peer reads the received message, a read receipt will be returned (read receipt needs to be enabled: {@link EMOptions#requireAck(boolean)})
/// During message delivery, the message ID will be changed from a local uuid to a global unique ID that is generated by the server to uniquely identify a message on all devices using the SDK.
/// This API should be implemented in the app to listen for message status changes.
///
abstract class ChatMessageListener {
  ///
  /// Occurs when a message is received.
  ///
  /// This callback is triggered to notify the user when a message such as texts or an image, video, voice, location, or file is received.
  ///
  /// Param [messages] The received messages.
  ///
  void onMessagesReceived(List<EMMessage> messages) {}

  ///
  /// Occurs when a command message is received.
  ///
  /// This callback only contains a command message body that is usually invisible to users.
  ///
  /// Param [messages]The received cmd messages.
  ///
  void onCmdMessagesReceived(List<EMMessage> messages) {}

  ///
  /// Occurs when a read receipt is received for a message.
  ///
  /// Param [messages] The has read messages.
  ///
  void onMessagesRead(List<EMMessage> messages) {}

  ///
  /// Occurs when a read receipt is received for a group message.
  ///
  /// Param [groupMessageAcks] The group message acks.
  ///
  void onGroupMessageRead(List<EMGroupMessageAck> groupMessageAcks) {}

  ///
  /// Occurs when the update for the group message read status is received.
  ///
  void onMessagesDelivered(List<EMMessage> messages) {}

  ///
  /// Occurs when a received message is recalled.
  ///
  /// Param [messages]  The recalled messages.
  ///
  void onMessagesRecalled(List<EMMessage> messages) {}

  ///
  /// Occurs when the conversation updated.
  ///
  void onConversationsUpdate() {}

  ///
  /// Occurs when a conversation read receipt is received.
  ///
  /// Occurs in the following scenarios:
  /// (1) The message is read by the receiver (The conversation receipt is sent).
  /// Upon receiving this event, the SDK sets the `isAcked` property of the message in the conversation to `true` in the local database.
  /// (2) In the multi-device login scenario, when one device sends a Conversation receipt,
  /// the server will set the number of unread messages to 0, and the callback occurs on the other devices.
  /// and sets the `isRead` property of the message in the conversation to `true` in the local database.
  ///
  /// Param [from] The user who sends the read receipt.
  /// Param [to]   The user who receives the read receipt.
  ///
  void onConversationRead(String from, String to) {}

}
